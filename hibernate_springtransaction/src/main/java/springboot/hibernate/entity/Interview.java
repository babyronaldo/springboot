package springboot.hibernate.entity;
// Generated Dec 12, 2016 1:49:28 PM by Hibernate Tools 5.1.0.Alpha1

import static javax.persistence.GenerationType.IDENTITY;

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;

/**
 * Interview generated by hbm2java
 */
@Entity
@Table(name = "interview", catalog = "interview_3")
public class Interview implements java.io.Serializable {

    private Integer interviewId;
    private Candidate candidate;
    private User user;
    private Date date;
    private String position;
    private int iqTest;
    private int techTest;
    private int toeic;
    private boolean result;
    private String source;
    private String notes;
    private String comment;
    private Boolean isDeleted;
    private int candidateId;
    private int userId;

    @InitBinder
    protected void initBinder(WebDataBinder binder) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
    }

    public Interview() {
        super();
    }

    public Interview(Candidate candidate, User user, Date date, String position, int iqTest, int techTest,
                     int toeic, boolean result, String source, String notes, String comment, Boolean isDeleted, int candidateId) {
        this.candidate = candidate;
        this.user = user;
        this.date = date;
        this.position = position;
        this.iqTest = iqTest;
        this.techTest = techTest;
        this.toeic = toeic;
        this.result = result;
        this.source = source;
        this.notes = notes;
        this.comment = comment;
        this.isDeleted = isDeleted;
        this.candidateId = candidateId;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "interviewId", unique = true, nullable = false)
    public Integer getInterviewId() {
        return this.interviewId;
    }

    public void setInterviewId(Integer interviewId) {
        this.interviewId = interviewId;
    }

    // cascadeALL means that when modify Interview -> modify its owning relationship

    @ManyToOne(fetch = FetchType.EAGER)//, cascade = CascadeType.ALL)
    @JoinColumn(name = "candidateId", referencedColumnName = "candidateId", nullable = false, insertable = false, updatable = false)
    public Candidate getCandidate() {
        return this.candidate;
    }

    public void setCandidate(Candidate candidate) {
        this.candidate = candidate;
    }

    @ManyToOne(fetch = FetchType.EAGER)//, cascade = CascadeType.ALL)
    @JoinColumn(name = "userId", referencedColumnName = "userId", nullable = false, insertable = false, updatable = false)
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "date", nullable = false, length = 10)
    public Date getDate() {
        return this.date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    @NotEmpty
    @Column(name = "position", nullable = false, length = 30)
    public String getPosition() {
        return this.position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    @NotNull
    @Column(name = "iqTest", nullable = false)
    public int getIqTest() {
        return this.iqTest;
    }

    public void setIqTest(int iqTest) {
        this.iqTest = iqTest;
    }

    @NotNull
    @Column(name = "techTest", nullable = false)
    public int getTechTest() {
        return this.techTest;
    }

    public void setTechTest(int techTest) {
        this.techTest = techTest;
    }

    @NotNull
    @Column(name = "toeic", nullable = false)
    public int getToeic() {
        return this.toeic;
    }

    public void setToeic(int toeic) {
        this.toeic = toeic;
    }

    @Column(name = "result", nullable = false)
    public boolean isResult() {
        return this.result;
    }

    public void setResult(boolean result) {
        this.result = result;
    }

    @NotEmpty
    @Column(name = "source", nullable = false, length = 100)
    public String getSource() {
        return this.source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    @NotEmpty
    @Column(name = "notes", nullable = false, length = 100)
    public String getNotes() {
        return this.notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    @NotEmpty
    @Column(name = "comment", nullable = false, length = 100)
    public String getComment() {
        return this.comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    @Column(name = "isDeleted")
    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean deleted) {
        isDeleted = deleted;
    }

    @NotNull
    @Column(name = "candidateId")
    public int getCandidateId() {
        return candidateId;
    }

    public void setCandidateId(int candidateId) {
        this.candidateId = candidateId;
    }

    @NotNull
    @Column(name = "userId")
    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }
}
/*
@ManyToOne()
@JoinColumn(name="role_id", referencedColumnName = "role_id", insertable = false, updatable = false)
private UserRole userRole;

@OneToMany(targetEntity=User.class, mappedBy="userRole",cascade=CascadeType.ALL, fetch = FetchType.LAZY)
private List<User> user = new ArrayList<>();
* */